

So you see I have come to doubt all that I once held as true . . .

I am not sure this stuff with DataDict is so very damned clever after all. What am I really getting out of it, that I would not be getting out of an interface/abstract class with with long:Id and string:Type, and public string Serialize() (maybe also deserialize), with various custom components inheriting?
I had some reason why I thought a more general data storage was better . . . but I am not sure it was a good reason or a clearly envisioned reason.
With the DataDict, we don't have to do any casting, but god I would much rather do some casting than all of this complicated key/value juggling. DataDict would serialize automatically, but is serialization really hard with custom components?

I think I need to at least try this the other way, cause what I'm doing now is a wordy overabstracted mess. Maybe bump up serialization and make sure that goes smoothly.







TODO: serialize/deserialize game state.
TODO: Fancy text interpolation for messages. Forget tracery, see https://github.com/TheBerkin/Rant instead.
TODO: arena (battlefield? or just "combat"? entity with one container for actors and ...?)
TODO: locations for physical objects.
TODO: weapons/armor droppable
TODO: weapons/armor damageable
TODO: combat/noncombat modes
TODO: emit list of supported actions for specified (and/or current) mode


TODO: pretty text descriptions
TODO: timing system: events fire off on a clock









http://ripplega.me/development/ecs-ez/ is talking to me at a level that is easy to understand.

So I find that what I am doing with Cp... for naming component static classes is strongly frowned upon. I could refactor so all components live in a "Cp" namespace instead.
However, I'm not convinced this would be an improvement. Will keep thinking about this.

I'm wondering if I want a special string class just to indicate that this value is supposed to be from a string enum.
http://stackoverflow.com/questions/3436101/create-custom-string-class
Yanno, an alias for string is what I really want. Not a new class. [...] Apparently this is called a "typedef" in C and I'm not the first to want it.
Nope, can't inherit from string, it's sealed.
Looks like the link above is the answer, if I want to do it at all. For now, won't.



way more than i need now, but maybe i'd like to remember this later.
        internal static class Vals
        {
            internal static class TargetType
            {
                public const string SingleMelee = nameof(SingleMelee);
                public const string SingleRanged = nameof(SingleRanged);
                public const string Aoe = nameof(Aoe);
            }

            internal static class MeleeWeaponType
            {
                public const string BareFist = nameof(BareFist);
                public const string Dagger = nameof(Dagger);
                public const string LongSword = nameof(LongSword);
                public const string Claymore = nameof(Claymore);
            }

            internal static class DamageType
            {
                public const string Mechanical = nameof(Mechanical);
                public const string Heat = nameof(Heat);
                public const string Electric = nameof(Electric);
                public const string Poison = nameof(Poison);
            }
        }

similar to above, but probably less valuable.
            /// <summary>
            /// String: enum.
            /// </summary>
            public const string TargetType = nameof(TargetType);
            /// <summary>
            /// Long
            /// </summary>
            public const string TargetEntityId = nameof(TargetEntityId);
            /// <summary>
            /// Long
            /// </summary>
            public const string RawRoll = nameof(RawRoll);
            /// <summary>
            /// DataDict
            /// </summary>
            public const string RollModifiers = nameof(RollModifiers);
            /// <summary>
            /// String: enum
            /// </summary>
            public const string DamageType = nameof(DamageType);


