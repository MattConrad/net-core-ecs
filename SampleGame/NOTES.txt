Consider unit testing. How important is it? How well can we test the static classes?

TODO: make singleton instances of each natural weapon type that can be shared by any wielder. for now, just make them indestructible, and deal with damage effects on the anatomy rather than the "weapon".

TODO: emit list of supported actions for specified (and/or current) mode
TODO: weapons/armor droppable
TODO: weapons/armor damageable

TODO: timing system: events fire off on a clock
TODO: locations for physical objects.

TODO: pretty text descriptions

TODO: Fancy text interpolation for messages. Forget tracery, see https://github.com/TheBerkin/Rant instead.
TODO: combat/noncombat modes

TODO: maybe rethink equipment anatomy AGAIN as a bitmask-enum. Int64 would cover lots of body parts, humanoid and exotic. but this is a maybe someday thing. https://gamedev.stackexchange.com/questions/48054/how-to-handle-weapon-slots

TODO: maybe we want the tree of actions to go arbitrarily deep: https://stackoverflow.com/questions/647533/recursive-generic-types
	really, I think this is very unlikely to make sense. alas, i could see 3 deep, but probably not arbitrarily deep. 


don't put logic in parts. sometimes it could plausibly go there, but then there would be some logic in parts and others in systems, and you'd have to guess where the logic was this time.
parts are data. only data.

on the question of defined strings vs enums. there is a good case for enums. they do serialize just fine. however, if you add a new enum property (or any other non-nullable property) to a part, deserializing the old blueprint will explode. if you add a new defined string property, it won't. this is only a convenience, but one that I noticed just playing around with serialized enums. (we will still have to deal with adding other non null properties, ofc) (well, we can probably work around this for enums after all by using JSON.NET DefaultValueHandling and setting to Populate or something like that.)



http://ripplega.me/development/ecs-ez/ is talking to me at a level that is easy to understand.

I'm wondering if I want a special string class just to indicate that this value is supposed to be from a string enum.
http://stackoverflow.com/questions/3436101/create-custom-string-class
Yanno, an alias for string is what I really want. Not a new class. [...] Apparently this is called a "typedef" in C and I'm not the first to want it.
Nope, can't inherit from string, it's sealed.
Looks like the link above is the answer, if I want to do it at all. For now, won't.



way more than i need now, but maybe i'd like to remember this later.
        internal static class Vals
        {
            internal static class TargetType
            {
                public const string SingleMelee = nameof(SingleMelee);
                public const string SingleRanged = nameof(SingleRanged);
                public const string Aoe = nameof(Aoe);
            }

            internal static class MeleeWeaponType
            {
                public const string BareFist = nameof(BareFist);
                public const string Dagger = nameof(Dagger);
                public const string LongSword = nameof(LongSword);
                public const string Claymore = nameof(Claymore);
            }

            internal static class DamageType
            {
                public const string Mechanical = nameof(Mechanical);
                public const string Heat = nameof(Heat);
                public const string Electric = nameof(Electric);
                public const string Poison = nameof(Poison);
            }
        }

similar to above, but probably less valuable.
            /// <summary>
            /// String: enum.
            /// </summary>
            public const string TargetType = nameof(TargetType);
            /// <summary>
            /// Long
            /// </summary>
            public const string TargetEntityId = nameof(TargetEntityId);
            /// <summary>
            /// Long
            /// </summary>
            public const string RawRoll = nameof(RawRoll);
            /// <summary>
            /// DataDict
            /// </summary>
            public const string RollModifiers = nameof(RollModifiers);
            /// <summary>
            /// String: enum
            /// </summary>
            public const string DamageType = nameof(DamageType);


